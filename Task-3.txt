Task 1 : — — — — — → Below
Within script.py in the pane to the right, create an empty Node class.
Inside, define an .__init__() method for the Node. It should take a value and a next_node.
next_node should default to None if not provided. These variables should be saved to self with corresponding key names.
2. Define .get_value() and .get_next_node() methods. These should return the corresponding values from self.
3. Define a .set_next_node() method that takes self and next_node as parameters and allows you to update the link to the next node.
4. Outside the Node class, create an instance of Node called my_node with a value of 44.
Use .get_value() to print the value of my_node.
Task 2 : — — — — — → Below
Linked List Implementation I
With the Node in hand, we can start building the actual linked list. Depending on the end-use of the linked list, a variety of methods can be defined.
For our use, we want to be able to:
get the head node of the list (it’s like peeking at the first item in line)
add a new node to the beginning of the list
print out the list values in order
remove a node that has a particular value
Within script.py in the pane to the right, create an empty LinkedList class.
Define an .__init__() method for the LinkedList. We want to be able to instantiate a LinkedList with a head node, so .__init__() should take value as an argument. Make sure value defaults to None if no value is provided.
Inside the .__init__() method, set self.head_node equal to a new Node with value as its value.
2. Define a .get_head_node() method that helps us peek at the first node in the list.
Inside the method, return the head node of the linked list.
Linked Lists Implementation II
So far we can:
create a new LinkedList using .__init__()
get the head node of the list using .get_head_node()
Next up, we’ll define methods for our LinkedList class that allow us to:
insert a new head node
return all the nodes in the list as a string so we can print them out in the terminal!
Task 3 : — — — — — → Below
Define an .insert_beginning() method which takes new_value as an argument.
Inside the method, instantiate a Node with new_value. Name this new_node.
Now, link new_node to the existing head_node.
Finally, replace the current head_node with new_node.
2. Define a .stringify_list() method we can use to print out a string representation of a list’s nodes’ values.
The method should traverse the list, beginning at the head node, and collect each node’s value in a string. Once the end of the list has been reached, the method should return the string.
You can use str() to convert integers to strings!
Be sure to add "\n" between values so that each value prints on a new line.
3. Test your code by uncommenting the print statement at the bottom of script.py — did your list print what you expected?
Linked List Implementation III
Nice! Now we have a bunch of helpful LinkedList methods under our belt.
The final use case we mentioned was the ability to remove an arbitrary node with a particular value. This is slightly more complex, since a couple of special cases need to be handled.
Consider the following list:
a -> b -> c
If node b is removed from the list, the new list should be:
a -> c
We need to update the link within the a node to match what b was pointing to prior to removing it from the linked list.
Lucky for us, in Python, nodes which are not referenced will be removed for us automatically. If we take care of the references, b will be “removed” for us in a process called Garbage Collection.
Task 4 : — — — — — → Below
At the bottom of script.py, add a .remove_node() method to LinkedList. It should take value_to_remove as a parameter. We’ll be looking for a node with this value to remove.
In the body of .remove_node(), set a new variable current_node equal to the head_node of the list.
We’ll use current_node to keep track of the node we are currently looking at as we traverse the list.
2. Still inside the method body, use an if statement to check whether the list’s head_node has a value that is the same as value_to_remove.
If it does, we’ve found the node we’re looking for and we need to adjust the list’s pointer to head_node.
Inside the if clause, set self.head_node equal to the second node in the linked list.
3. Add an else clause. Within the else clause:
Traverse the list until current_node.get_next_node().get_value() is the value_to_remove.
(Just like with stringify_list you can traverse the list using a while loop that checks whether current_node exists.)
When value_to_remove is found, adjust the links in the list so that current_node is linked to next_node.get_next_node().
After you remove the node with a value of value_to_remove, make sure to set current_node to None so that you exit the loop.
Overall Submission Final Task
Linked List Review
Congratulations, you have implemented a linked list in Python!
We did this by:
Defining a Node class to hold the values and links between nodes
Implementing a LinkedList class to handle external operations on the list like adding and removing nodes
Task Final — — — →
Feel free to play around a bit with your code. Here are some ideas:
Create a few nodes and adding them to a new linked list
Print your linked list out by using your stringify_list() method
Remove your linked list’s head node
Print your list again — was your original head node removed?
So far you’ve built a method to remove the first occurrence of a given value. How do you think you would remove all nodes that have a specific value? Try building a method to do that!
